// ReSharper disable CppInconsistentNaming
#pragma kernel UpdateMask
#pragma kernel ResetDrawnRegion
#pragma kernel ClipDrawnRegion
#pragma kernel ResetClippedRegion
#pragma kernel ComputeDrawnVertices;

#pragma enable_d3d11_debug_symbols

#include "Assets/RenderHell/Common/ShaderUtilities/ShaderUtilities.cginc"
#include "Assets/RenderHell/Brush3D/Shader/Brush3DUtilities.cginc"

RWTexture3D<float4> _SelectionMask;
int _SelectionMaskSize;

float3 _CursorNormalizedPos;
float _CursorNormalizedRadius;

float _Intersecting;
float _Drawing;
float _Clipping;
float _ErasingDrawn;

float4 _DrawingColor;

int _MeshVerticesCount;
RWStructuredBuffer<int> _MeshDrawnVerticesCount;
RWStructuredBuffer<float3> _MeshVertices;
RWStructuredBuffer<float4> _MeshDrawnVertices;

[numthreads(8,8,8)]
void UpdateMask (uint3 id : SV_DispatchThreadID)
{
    if (ClipId(id, _SelectionMaskSize) || when_eq(0.0f, _Intersecting))
    {
        return;
    }
    
    float4 storedColor = _SelectionMask[id];

    float4 newColor = lerp(storedColor, _DrawingColor, _Drawing);
    newColor = lerp(newColor, _ClippedColor, _Clipping);
    newColor = lerp(newColor, _ClippedColor, IsClippedColor(storedColor));
    newColor = lerp(newColor, _NoColor, and(IsDrawnColor(storedColor), _ErasingDrawn));

    float3 normalizedPos = float3(id.x / (float) _SelectionMaskSize, id.y / (float) _SelectionMaskSize, id.z / (float) _SelectionMaskSize);
    float isInsideCursorSphere = IsInsideSphere(normalizedPos, _CursorNormalizedPos, _CursorNormalizedRadius);
    _SelectionMask[id] = lerp(storedColor, newColor, isInsideCursorSphere);
}

[numthreads(8,8,8)]
void ResetDrawnRegion (uint3 id : SV_DispatchThreadID)
{
    if (ClipId(id, _SelectionMaskSize))
    {
        return;
    }
    
    float4 storedColor = _SelectionMask[id];
    _SelectionMask[id] = lerp(storedColor, _NoColor, IsDrawnColor(storedColor));
}

[numthreads(8,8,8)]
void ClipDrawnRegion (uint3 id : SV_DispatchThreadID)
{
    if (ClipId(id, _SelectionMaskSize))
    {
        return;
    }
    
    float4 storedColor = _SelectionMask[id];
    _SelectionMask[id] = lerp(storedColor, _ClippedColor, IsDrawnColor(storedColor));
}

[numthreads(8,8,8)]
void ResetClippedRegion (uint3 id : SV_DispatchThreadID)
{
    if (ClipId(id, _SelectionMaskSize))
    {
        return;
    }
    
    float4 storedColor = _SelectionMask[id];
    _SelectionMask[id] = lerp(storedColor, _NoColor, IsClippedColor(storedColor));
}

[numthreads(8,8,8)]
void ComputeDrawnVertices (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x * _SelectionMaskSize * _SelectionMaskSize + id.y * _SelectionMaskSize + id.z;
    if (ClipId(index, _MeshVerticesCount))
    {
        return;
    }

    float3 vertex = _MeshVertices[index];
    float3 vertexNormalizedUV = ComputeBrush3DNormalizedUV(vertex);
    uint3 nearestMaskElementIndex = uint3(vertexNormalizedUV.x * _SelectionMaskSize, vertexNormalizedUV.y * _SelectionMaskSize, vertexNormalizedUV.z * _SelectionMaskSize);

    float4 storedColor = _SelectionMask[nearestMaskElementIndex];
    float isDrawnColor = IsDrawnColor(storedColor);
    _MeshDrawnVertices[index] = float4(vertex, isDrawnColor);
    InterlockedAdd(_MeshDrawnVerticesCount[0], isDrawnColor);
}
